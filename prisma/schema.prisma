generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  firstName      String?
  profileUrl     String?         @default("")
  lastName       String?
  mobileNumber   String?
  whatsAppNumber String?
  isViewed       Boolean         @default(false)
  isVerified     Boolean         @default(false)
  isLoggedIn     Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  status         UserStatus      @default(ACTIVE)
  addresses      UserAddress[]
  cartItems      CartItem[]
  orders         OrderDetails[]
  wishlist       WishlistItem[]
  otps           Otp[]
  role           UserRole        @default(BUYER)
  reviews        ProductReview[]
  auditLog       AuditLog[]
  notification   Notification[]
  supportTicket  SupportTicket[]
  products       Product[]
  searchQueries  SearchQuery[]

  Session       Session[]
  UserPrivilege UserPrivilege[]
}

model Privilege {
  id    String          @id @default(uuid())
  name  String          @unique
  label String?
  users UserPrivilege[]
}

model UserPrivilege {
  id          String @id @default(uuid())
  userId      String
  privilegeId String

  user      User      @relation(fields: [userId], references: [id])
  privilege Privilege @relation(fields: [privilegeId], references: [id])

  createdAt DateTime @default(now())
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model SearchQuery {
  id        String   @id @default(uuid())
  query     String
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum UserStatus {
  ACTIVE
  DEACTIVE
  BANNED
}

enum UserRole {
  ADMIN
  SELLER
  BUYER
  STAFF
}

model Otp {
  id        String   @id @default(uuid())
  userId    String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model UserAddress {
  id              String   @id @default(uuid())
  userId          String
  fullName        String?
  addressLine1    String
  addressLine2    String?
  isDefault       Boolean
  city            String
  state           String
  zipCode         String
  country         String
  mobileNumber    String
  altMobileNumber String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id])
  OrderDetails OrderDetails[]
}

model ReturnRequest {
  id          String       @id @default(uuid())
  orderItemId String
  reason      String
  status      ReturnStatus @default(PENDING)
  requestedAt DateTime     @default(now())
  resolvedAt  DateTime?

  orderItem OrderItem @relation(fields: [orderItemId], references: [id])
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

model Product {
  id                   String            @id @default(uuid()) // Server generated
  title                String
  slug                 String            @unique // Server generated
  affiliateId          String            @unique
  sellerCode           String?
  styleId              String            @unique // Server generated
  isReturnable         Boolean           @default(false)
  isActive             Boolean           @default(false)
  isCODAvailable       Boolean           @default(true)
  returnPolicy         String?           @db.Text
  longTailKeyword      String?
  description          String?           @db.Text
  summary              String?           @db.Text
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  thumbnailUrl         String // Server generated
  ogImage              String? // Server generated
  views                Int               @default(0)
  displayPrice         Float             @default(0)
  customerTypeId       String?
  userId               String
  estimatedDeliveryDay Int?
  sizeChartId          String?
  fabricId             String?
  fabric               ProductFabric?    @relation(fields: [fabricId], references: [id])
  sizeChart            SizeChart?        @relation(fields: [sizeChartId], references: [id])
  categories           ProductCategory[] @relation("ProductCategories")
  subcategories        SubCategory[]     @relation("SubcategoryProducts")
  similarProducts      Product[]         @relation("SimilarProducts")

  user          User               @relation(fields: [userId], references: [id])
  customerType  CustomerType?      @relation(fields: [customerTypeId], references: [id], onDelete: SetNull)
  inventory     ProductInventory[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  images        ProductImage[]
  discounts     Discount[]         @relation("ProductDiscounts")
  wishlistItems WishlistItem[]
  productReview ProductReview[]
  tags          Json               @default("[]")

  similarTo Product[] @relation("SimilarProducts")
}

model SizeChart {
  id       String  @id @default(uuid())
  title    String?
  imageUrl String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  productId String?
  Product   Product[]
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String
  imageUrl  String
  colorId   String?
  caption   String?
  altText   String?

  color   ProductColor? @relation(fields: [colorId], references: [id], onDelete: SetNull)
  product Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductCategory {
  id            String        @id @default(uuid())
  name          String
  slug          String        @unique
  isVisible     Boolean       @default(false)
  products      Product[]     @relation("ProductCategories")
  subcategories SubCategory[]

  @@unique([name, slug])
}

model SubCategory {
  id         String          @id @default(uuid())
  name       String
  slug       String
  imageUrl   String?
  categoryId String
  category   ProductCategory @relation(fields: [categoryId], references: [id])
  products   Product[]       @relation("SubcategoryProducts")
}

model ProductInventory {
  id          String  @id @default(uuid())
  productId   String
  sizeId      String?
  mrp         Int
  price       Int
  discount    Float?
  stock       Int
  minQuantity Int     @default(1)

  size    ProductSize? @relation(fields: [sizeId], references: [id], onDelete: SetNull)
  product Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, sizeId])
}

model ProductColor {
  id        String         @id @default(uuid())
  name      String
  code      String
  slug      String         @unique
  images    ProductImage[]
  OrderItem OrderItem[]
  CartItem  CartItem[]
}

model ProductFabric {
  id      String    @id @default(uuid())
  name    String
  slug    String    @unique
  Product Product[]
}

model ProductSize {
  id          String             @id @default(uuid())
  name        String
  slug        String             @unique
  inventories ProductInventory[]

  OrderItem OrderItem[]
}

model CustomerType {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  productId String?
  products  Product[]
}

model Discount {
  id             String       @id @default(uuid())
  code           String       @unique
  description    String?
  isSpecial      Boolean      @default(false)
  isWebAvailable Boolean      @default(true)
  userEmails     Json         @default("[]")
  amount         Float
  minPrice       Float?
  orders         Int?
  maxPrice       Float?
  type           DiscountType
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isActive       Boolean      @default(true)
  productId      String?

  Product      Product?       @relation("ProductDiscounts", fields: [productId], references: [id])
  OrderDetails OrderDetails[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model ProductReview {
  id        String   @id @default(uuid())
  userId    String
  productId String
  images    Json     @default("[]")
  rating    Int
  review    String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  sizeId    String?
  colorId   String?
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User          @relation(fields: [userId], references: [id])
  product Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  color   ProductColor? @relation(fields: [colorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model OrderDetails {
  id            String         @id @default(uuid())
  orderId       String         @unique
  userId        String
  addressId     String?
  totalPrice    Float
  finalPrice    Float?
  status        OrderStatus
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  paymentMethod PaymentMethod?
  orderItems    OrderItem[]
  notes         String?        @db.Text
  trackingId    String?

  user           User             @relation(fields: [userId], references: [id])
  address        UserAddress?     @relation(fields: [addressId], references: [id])
  paymentDetails PaymentDetails[]
  discount       Discount?        @relation(fields: [discountId], references: [id])
  discountId     String?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  sizeId    String?
  colorId   String?
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order         OrderDetails    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  size          ProductSize?    @relation(fields: [sizeId], references: [id], onDelete: SetNull)
  color         ProductColor?   @relation(fields: [colorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  returnRequest ReturnRequest[]
}

model PaymentDetails {
  id         String   @id @default(uuid())
  orderId    String
  payment_id String
  order_id   String
  amount     Float
  currency   String
  method     String
  bank       String?  @default("")
  wallet     String?  @default("")
  upi        String?  @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order OrderDetails @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  INCOMPLETE
  PENDING
  APPROVED
  SHIPPED
  INTRANSIT
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  COD
  ONLINE
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String?
  action      String
  description String?
  createdAt   DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String?  @default("")
  hyperLink String?  @default("")
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model SupportTicket {
  id         String       @id @default(uuid())
  userId     String
  subject    String
  message    String
  status     TicketStatus @default(OPEN)
  createdAt  DateTime     @default(now())
  resolvedAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// Custom Models 

model Showcases {
  id                String  @id @default(uuid())
  title             String
  imageUrl          String
  hyperLink         String
  categoryHyperLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShopBySeason {
  id       String                @id @default(uuid())
  videoUrl String?
  products ShopBySeasonProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShopBySeasonProduct {
  id          String  @id @default(uuid())
  seasonId    String
  imageUrl    String
  hyperLink   String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  season ShopBySeason @relation(fields: [seasonId], references: [id])
}

model HeroSliders {
  id                String  @id @default(uuid())
  imageUrl          String
  hyperLink         String
  categoryHyperLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExclusiveCollection {
  id                String  @id @default(uuid())
  imageUrl          String?
  hyperLink         String?
  categoryHyperLink String?
  mrp               Float?
  price             Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trending {
  id        String  @id @default(uuid())
  videoUrl  String?
  title     String?
  price     String?
  hyperLink String?
  avatarUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewArrivals {
  id          String  @id @default(uuid())
  title       String?
  imageUrl    String?
  description String? @db.Text
  hyperLink   String?
  price       Float?
  mrp         Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShopByOccasion {
  id                 String                  @id @default(uuid())
  occasionName       String?
  categoryHyperLinks String?
  products           ShopByOccasionProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShopByOccasionProduct {
  id               String          @id @default(uuid())
  imageUrl         String
  hyperLink        String
  shopByOccasionId String?
  ShopByOccasion   ShopByOccasion? @relation(fields: [shopByOccasionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcements {
  id   String  @id @default(uuid())
  text String?
}

model ProductWeek {
  id        String  @id @default(uuid())
  title     String?
  hyperLink String?
  imageUrl  String?
}

model ImageWeek {
  id        String  @id @default(uuid())
  hyperLink String?
  imageUrl  String?
}

model Blogs {
  id          String  @id @default(uuid())
  imageUrl    String?
  title       String?
  description String?
  hyperLink   String?
}

model SocialLinks {
  id        String  @id @default(uuid())
  imageUrl  String?
  hyperLink String?
}

model Logos {
  id       String  @id @default(uuid())
  logoUrl  String
  altText  String?
  isActive Boolean @default(false)
}

model Vides {
  id          String @id @default(uuid())
  videoUrl    String
  title       String
  description String
  hyperLink   String
  price       Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String?
}

model Quotes {
  id        String  @id @default(uuid())
  text      String? @db.Text
  imageUrl  String?
  hyperLink String?
}

model Newsletter {
  id        String   @id @default(uuid())
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
