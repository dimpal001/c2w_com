generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  firstName      String?
  profileUrl     String?         @default("")
  lastName       String?
  mobileNumber   String?
  whatsAppNumber String?
  isVerified     Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  status         UserStatus      @default(ACTIVE)
  addresses      UserAddress[]
  cartItems      CartItem[]
  orders         OrderDetails[]
  wishlist       WishlistItem[]
  otps           Otp[]
  role           UserRole        @default(BUYER)
  reviews        ProductReview[]
  auditLog       AuditLog[]
  notification   Notification[]
  supportTicket  SupportTicket[]
  products       Product[]
  searchQueries  SearchQuery[]
}

model SearchQuery {
  id        String   @id @default(uuid())
  query     String
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum UserStatus {
  ACTIVE
  DEACTIVE
  BANNED
}

enum UserRole {
  ADMIN
  SELLER
  BUYER
}

model Otp {
  id        String   @id @default(uuid())
  userId    String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model UserAddress {
  id           String   @id @default(uuid())
  userId       String
  fullName     String?
  addressLine1 String
  addressLine2 String?
  isDefault    Boolean
  city         String
  state        String
  zipCode      String
  country      String
  mobileNumber String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model ReturnRequest {
  id          String       @id @default(uuid())
  orderItemId String
  reason      String
  status      ReturnStatus @default(PENDING)
  requestedAt DateTime     @default(now())
  resolvedAt  DateTime?

  orderItem OrderItem @relation(fields: [orderItemId], references: [id])
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

model Product {
  id                   String            @id @default(uuid()) // Server generated
  title                String
  slug                 String            @unique // Server generated
  styleId              String            @unique // Server generated
  isReturnable         Boolean           @default(false)
  isActive             Boolean           @default(false)
  returnPolicy         String?           @db.Text
  description          String?           @db.Text
  summary              String?           @db.Text
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  thumbnailUrl         String // Server generated
  views                Int               @default(0)
  displayPrice         Float             @default(0)
  customerTypeId       String?
  userId               String
  estimatedDeliveryDay Int?
  categories           ProductCategory[] @relation("ProductCategories")
  similarProducts      Product[]         @relation("SimilarProducts")

  user          User               @relation(fields: [userId], references: [id])
  customerType  CustomerType?      @relation(fields: [customerTypeId], references: [id], onDelete: SetNull)
  inventory     ProductInventory[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  images        ProductImage[]
  discounts     Discount[]         @relation("ProductDiscounts")
  wishlistItems WishlistItem[]
  productReview ProductReview[]
  tags          Json               @default("[]")

  similarTo Product[] @relation("SimilarProducts")
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String
  imageUrl  String
  colorId   String?

  color   ProductColor? @relation(fields: [colorId], references: [id], onDelete: SetNull)
  product Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductCategory {
  id       String    @id @default(uuid())
  name     String
  slug     String    @unique
  products Product[] @relation("ProductCategories")

  @@unique([name, slug])
}

model ProductInventory {
  id          String  @id @default(uuid())
  productId   String
  sizeId      String?
  mrp         Int
  price       Int
  stock       Int
  minQuantity Int     @default(1)

  size    ProductSize? @relation(fields: [sizeId], references: [id], onDelete: SetNull)
  product Product      @relation(fields: [productId], references: [id])
}

model ProductColor {
  id     String         @id @default(uuid())
  name   String
  code   String
  slug   String         @unique
  images ProductImage[]
}

model ProductSize {
  id          String             @id @default(uuid())
  name        String
  slug        String             @unique
  inventories ProductInventory[]

  OrderItem OrderItem[]
}

model CustomerType {
  id       String    @id @default(uuid())
  name     String
  slug     String    @unique
  products Product[]
}

model Discount {
  id          String       @id @default(uuid())
  code        String       @unique
  description String?
  isSpecial   Boolean      @default(false)
  userEmail   String?
  amount      Float
  minPrice    Float?
  maxPrice    Float?
  type        DiscountType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isActive    Boolean      @default(true)
  productId   String?

  Product      Product?       @relation("ProductDiscounts", fields: [productId], references: [id])
  OrderDetails OrderDetails[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model ProductReview {
  id        String   @id @default(uuid())
  userId    String
  productId String
  images    Json     @default("[]")
  rating    Int
  review    String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model OrderDetails {
  id            String        @id @default(uuid())
  orderId       String        @unique
  userId        String
  totalPrice    Float
  status        OrderStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentMethod PaymentMethod
  orderItems    OrderItem[]
  notes         String?       @db.Text
  trackingId    String?

  user           User             @relation(fields: [userId], references: [id])
  paymentDetails PaymentDetails[]
  discount       Discount?        @relation(fields: [discountId], references: [id])
  discountId     String?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  sizeId    String?
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order         OrderDetails    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product         @relation(fields: [productId], references: [id])
  size          ProductSize?    @relation(fields: [sizeId], references: [id], onDelete: SetNull)
  returnRequest ReturnRequest[]
}

model PaymentDetails {
  id         String   @id @default(uuid())
  orderId    String
  payment_id String
  order_id   String
  amount     Float
  currency   String
  method     String
  bank       String?  @default("")
  wallet     String?  @default("")
  upi        String?  @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order OrderDetails @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  INCOMPLETE
  PENDING
  APPROVED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  COD
  ONLINE
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String?
  action      String
  description String?
  createdAt   DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String?  @default("")
  hyperLink String?  @default("")
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model SupportTicket {
  id         String       @id @default(uuid())
  userId     String
  subject    String
  message    String
  status     TicketStatus @default(OPEN)
  createdAt  DateTime     @default(now())
  resolvedAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// Custom Models 

model Showcases {
  id                String  @id @default(uuid())
  title             String
  imageUrl          String
  hyperLink         String
  categoryHyperLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShopBySeason {
  id       String                @id @default(uuid())
  videoUrl String?
  products ShopBySeasonProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShopBySeasonProduct {
  id          String  @id @default(uuid())
  seasonId    String
  imageUrl    String
  hyperLink   String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  season ShopBySeason @relation(fields: [seasonId], references: [id])
}

model HeroSliders {
  id                String  @id @default(uuid())
  imageUrl          String
  hyperLink         String
  categoryHyperLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExclusiveCollection {
  id                String  @id @default(uuid())
  imageUrl          String?
  hyperLink         String?
  categoryHyperLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trending {
  id                String  @id @default(uuid())
  videoUrl          String?
  title             String?
  price             String?
  hyperLink         String?
  categoryHyperLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewAriivals {
  id                String      @id @default(uuid())
  imageUrl          String?
  hyperLink         String?
  categoryHyperLink String?
  HyperLink         HyperLink[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShopByOccasion {
  id                 String      @id @default(uuid())
  occasionName       String?
  categoryHyperLinks String?
  products           HyperLink[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HyperLink {
  id               String          @id @default(uuid())
  imageUrl         String
  hyperLink        String
  newAriivalsId    String
  newAriivals      NewAriivals     @relation(fields: [newAriivalsId], references: [id])
  ShopByOccasion   ShopByOccasion? @relation(fields: [shopByOccasionId], references: [id])
  shopByOccasionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
